// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package basm

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson56de76c1DecodeGithubComBlockyBasmGoSdk(in *jlexer.Lexer, out *verifyAttestationOutput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "raw_claims":
			if in.IsNull() {
				in.Skip()
				out.RawClaims = nil
			} else {
				out.RawClaims = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComBlockyBasmGoSdk(out *jwriter.Writer, in verifyAttestationOutput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"raw_claims\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.RawClaims)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v verifyAttestationOutput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComBlockyBasmGoSdk(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v verifyAttestationOutput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComBlockyBasmGoSdk(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *verifyAttestationOutput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComBlockyBasmGoSdk(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *verifyAttestationOutput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComBlockyBasmGoSdk(l, v)
}
func easyjson56de76c1DecodeGithubComBlockyBasmGoSdk1(in *jlexer.Lexer, out *verifyAttestationInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "enclave_attested_app_public_key":
			if in.IsNull() {
				in.Skip()
				out.EnclaveAttestedKey = nil
			} else {
				out.EnclaveAttestedKey = in.Bytes()
			}
		case "transitive_attestation":
			if in.IsNull() {
				in.Skip()
				out.TransitiveAttestation = nil
			} else {
				out.TransitiveAttestation = in.Bytes()
			}
		case "acceptable_measurements":
			if in.IsNull() {
				in.Skip()
				out.AcceptableMeasures = nil
			} else {
				out.AcceptableMeasures = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComBlockyBasmGoSdk1(out *jwriter.Writer, in verifyAttestationInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"enclave_attested_app_public_key\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.EnclaveAttestedKey)
	}
	{
		const prefix string = ",\"transitive_attestation\":"
		out.RawString(prefix)
		out.Base64Bytes(in.TransitiveAttestation)
	}
	{
		const prefix string = ",\"acceptable_measurements\":"
		out.RawString(prefix)
		out.Base64Bytes(in.AcceptableMeasures)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v verifyAttestationInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComBlockyBasmGoSdk1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v verifyAttestationInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComBlockyBasmGoSdk1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *verifyAttestationInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComBlockyBasmGoSdk1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *verifyAttestationInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComBlockyBasmGoSdk1(l, v)
}
func easyjson56de76c1DecodeGithubComBlockyBasmGoSdk2(in *jlexer.Lexer, out *result) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ok":
			out.IsOK = bool(in.Bool())
		case "error":
			out.Error = string(in.String())
		case "value":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Value).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComBlockyBasmGoSdk2(out *jwriter.Writer, in result) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ok\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsOK))
	}
	{
		const prefix string = ",\"error\":"
		out.RawString(prefix)
		out.String(string(in.Error))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Raw((in.Value).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v result) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComBlockyBasmGoSdk2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v result) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComBlockyBasmGoSdk2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *result) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComBlockyBasmGoSdk2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *result) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComBlockyBasmGoSdk2(l, v)
}
func easyjson56de76c1DecodeGithubComBlockyBasmGoSdk3(in *jlexer.Lexer, out *httpRequestOutput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status_code":
			out.StatusCode = int(in.Int())
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				out.Body = in.Bytes()
			}
		case "headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Headers = make(map[string][]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v14 []string
					if in.IsNull() {
						in.Skip()
						v14 = nil
					} else {
						in.Delim('[')
						if v14 == nil {
							if !in.IsDelim(']') {
								v14 = make([]string, 0, 4)
							} else {
								v14 = []string{}
							}
						} else {
							v14 = (v14)[:0]
						}
						for !in.IsDelim(']') {
							var v15 string
							v15 = string(in.String())
							v14 = append(v14, v15)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Headers)[key] = v14
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComBlockyBasmGoSdk3(out *jwriter.Writer, in httpRequestOutput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status_code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.StatusCode))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Body)
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		if in.Headers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.Headers {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v18Name))
				out.RawByte(':')
				if v18Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v19, v20 := range v18Value {
						if v19 > 0 {
							out.RawByte(',')
						}
						out.String(string(v20))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v httpRequestOutput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComBlockyBasmGoSdk3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v httpRequestOutput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComBlockyBasmGoSdk3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *httpRequestOutput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComBlockyBasmGoSdk3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *httpRequestOutput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComBlockyBasmGoSdk3(l, v)
}
func easyjson56de76c1DecodeGithubComBlockyBasmGoSdk4(in *jlexer.Lexer, out *httpRequestInput) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "method":
			out.Method = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "headers":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Headers = make(map[string][]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v21 []string
					if in.IsNull() {
						in.Skip()
						v21 = nil
					} else {
						in.Delim('[')
						if v21 == nil {
							if !in.IsDelim(']') {
								v21 = make([]string, 0, 4)
							} else {
								v21 = []string{}
							}
						} else {
							v21 = (v21)[:0]
						}
						for !in.IsDelim(']') {
							var v22 string
							v22 = string(in.String())
							v21 = append(v21, v22)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.Headers)[key] = v21
					in.WantComma()
				}
				in.Delim('}')
			}
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				out.Body = in.Bytes()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComBlockyBasmGoSdk4(out *jwriter.Writer, in httpRequestInput) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix[1:])
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"headers\":"
		out.RawString(prefix)
		if in.Headers == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v24First := true
			for v24Name, v24Value := range in.Headers {
				if v24First {
					v24First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v24Name))
				out.RawByte(':')
				if v24Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v25, v26 := range v24Value {
						if v25 > 0 {
							out.RawByte(',')
						}
						out.String(string(v26))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		out.Base64Bytes(in.Body)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v httpRequestInput) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComBlockyBasmGoSdk4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v httpRequestInput) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComBlockyBasmGoSdk4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *httpRequestInput) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComBlockyBasmGoSdk4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *httpRequestInput) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComBlockyBasmGoSdk4(l, v)
}
