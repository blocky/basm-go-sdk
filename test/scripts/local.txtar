# [setup] copy the wasm binary to test directory
exec cp $WASM_FILE .
exec dasel put -r toml -v "$PLATFORM" 'acceptable_measurements.[].platform' < config.toml
exec dasel put -r toml -v "$CODE_MEASURE" 'acceptable_measurements.last().code' < config.toml
exec dasel put -r toml -v "$AUTH_TOKEN" 'auth_token' < config.toml
exec dasel put -r toml -v "$HOST" 'host' < config.toml


# [execute] call the bky-as CLI to attest a function call
stdin fn-call.json
exec bky-as attest-fn-call

# [check] assert expected values
stderr '✅ string logged to host'


-- fn-call.json --
{
    "code_file": "x.wasm",
    "function": "exampleFunc",
    "input": {
        "log_value": "string logged and returned in response",
        "log_to_host_value": "✅ string logged to host"
    },
    "secret": {
        "bearer_token": "this is a bearer token"
    }
}

-- config.toml --
# a set of acceptable server enclave measurements for CLI to interact with
acceptable_measurements = [
    # platform and code pair identifies the acceptable server implementation

    # a measurement that is valid for when the server is running on a non-TEE environment
    { platform = "plain", code = "plain" },
    # a measurement that is valid for when the server is running in debug mode on nitro
    { platform = "nitro", code = "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" },
]

# token authorizing CLI's access to the server
auth_token = "user_auth_token"

# the server that the CLI interacts with.
# `local-server` is a special host value will start a local attestation service
# server for testing and development. To interact with a real server, replace
# `local-server` with the server's address.
host = "local-server"
